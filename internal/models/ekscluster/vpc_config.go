/*
Copyright 2022 VMware, Inc. All Rights Reserved.
SPDX-License-Identifier: MPL-2.0
*/

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareTanzuManageV1alpha1EksclusterVPCConfig The VPC configuration for the EKS cluster.
//
// swagger:model vmware.tanzu.manage.v1alpha1.ekscluster.VPCConfig
type VmwareTanzuManageV1alpha1EksclusterVPCConfig struct {

	// Enable private access on the cluster.
	EnablePrivateAccess bool `json:"enablePrivateAccess,omitempty"`

	// Enable public access on the cluster.
	EnablePublicAccess bool `json:"enablePublicAccess,omitempty"`

	// Public access cidrs.
	PublicAccessCidrs []string `json:"publicAccessCidrs"`

	// Security groups for the cluster VMs.
	SecurityGroups []string `json:"securityGroups"`

	// Subnet ids used by the cluster.
	SubnetIds []string `json:"subnetIds"`
}

// Validate validates this vmware tanzu manage v1alpha1 ekscluster v p c config
func (m *VmwareTanzuManageV1alpha1EksclusterVPCConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vmware tanzu manage v1alpha1 ekscluster v p c config based on context it is used
func (m *VmwareTanzuManageV1alpha1EksclusterVPCConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1EksclusterVPCConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuManageV1alpha1EksclusterVPCConfig) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuManageV1alpha1EksclusterVPCConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
